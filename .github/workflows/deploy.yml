name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List directories
        run: |
          echo "Listing root directory"
          ls -la
          echo "Listing fullstack-assignment-main directory"
          cd fullstack-assignment-main
          ls -la
          echo "Listing backend directory"
          cd backend
          ls -la

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd fullstack-assignment-main/backend
          python -m pip install --upgrade pip
          pip freeze > requirements.txt
          pip install -r requirements.txt

      - name: Build and deploy Django
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          cd fullstack-assignment-main/backend
          python3 -m venv venv
          source venv/bin/activate
          pip install django
          pip install python-dotenv
          pip install django-cors-headers
          pip install djangorestframework
          pip install django-nested-admin
          pip install openai
          python (link unavailable) collectstatic --noinput
          python (link unavailable) makemigrations
          python (link unavailable) migrate
          pip install gunicorn
          gunicorn --bind 0.0.0.0:8000 fullstack_assignment.wsgi:application &

      - name: Create .env file
        run: |
          cd fullstack-assignment-main/backend
          echo "FRONTEND_URL=(link unavailable)" >> .env
          echo "BACKEND_URL=(link unavailable)" >> .env
          echo "BE_ADMIN_EMAIL=admin@admin.com" >> .env
          echo "BE_ADMIN_PASSWORD=admin" >> .env
          echo "DJANGO_SECRET_KEY=Django secret key" >> .env

      - name: Configure Nginx
        run: |
          sudo sed -i '/^_names_hash_bucket_size/d' /etc/nginx/nginx.conf
          echo 'server_names_hash_bucket_size 128;' | sudo tee -a /etc/nginx/nginx.conf
          sudo tee /etc/nginx/sites-available/django <<EOF
          server {
            listen 80;
            server_name (link unavailable);
            location / {
              proxy_pass (link unavailable);
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
            }
          }
          EOF
          sudo ln -s /etc/nginx/sites-available/django /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl reload nginx

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Next.js dependencies and build
        run: |
          cd fullstack-assignment-main/frontend
          npm install
          npm run build

      - name: Set up SSH Agent
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          ssh-copy-id -i ~/.ssh/id_rsa.pub user@$SERVER_IP
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no user@$SERVER_IP "echo 'SSH connection successful'"
