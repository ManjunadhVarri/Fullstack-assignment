name: Deploy

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: List root directory
      run: |
          echo "Listing root directory"
          ls -la
    - name: List fullstack-assignment-main directory
      run: |
          echo "Listing fullstack-assignment-main directory"
          cd fullstack-assignment-main
          ls -la
    - name: List backend directory
      run: |
          echo "Listing backend directory"
          cd fullstack-assignment-main/backend
          ls -la
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        cd fullstack-assignment-main/backend
        python -m pip install --upgrade pip
        pip freeze > requirements.txt
        pip install -r requirements.txt
    - name: Build and deploy Django
      run: |
        cd fullstack-assignment-main/backend
        python3 -m venv venv
        source venv/bin/activate
        python3 -m pip install --upgrade pip
        pip install django
        
    - name: Create .env file
      run: |
          cd fullstack-assignment-main/backend
          echo "FRONTEND_URL=http://127.0.0.1:3000" >> .env
          echo "BACKEND_URL=http://127.0.0.1:8000" >> .env
          echo "BE_ADMIN_EMAIL=admin@admin.com" >> .env
          echo "BE_ADMIN_PASSWORD=admin" >> .env
          echo "DJANGO_SECRET_KEY=Django secret key" >> .env
          
    - name: Run Django management commands
      run: |
          cd fullstack-assignment-main/backend
          source venv/bin/activate 
          pip install python-dotenv
          pip install django-cors-headers
          pip install djangorestframework
          pip install django-nested-admin
          pip install openai
          python manage.py makemigrations
          python manage.py migrate
          pip install gunicorn
          
    - name: Configure Nginx
      run: |
         sudo sed -i '/^server_names_hash_bucket_size/d' /etc/nginx/nginx.conf
          echo 'server_names_hash_bucket_size 128;' | sudo tee -a /etc/nginx/nginx.conf
          # Write server block configuration
          sudo tee /etc/nginx/sites-available/django <<EOF
          server {
              listen 80;
              server_name ec2-51-20-193-131.eu-north-1.compute.amazonaws.com;
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
          
          # Enable the site configuration and reload Nginx
          sudo ln -s /etc/nginx/sites-available/django /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl reload nginx
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install Next.js dependencies and build
      run: |
        cd fullstack-assignment-main/frontend
        npm install
        npm run build
    - name: Deploy to server
      env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
      run: |
        mkdir -p ~/.ssh
        echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=DEBUG ec2-user@$SERVER_IP "echo 'SSH connection successful'"
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@$SERVER_IP << 'EOF'
        # Clone the repository if it does not exist
        if [ ! -d "fullstack-assignment-main" ]; then
          git clone https://github.com/ManjunadhVarri/Fullstack-assignment.git
        fi
        cd fullstack-assignment-main
        git pull origin main
        cd backend
        source venv/bin/activate || python3 -m venv venv && source venv/bin/activate
        pip install -r requirements.txt
        python manage.py collectstatic --noinput
        python manage.py migrate
        python manage.py makemigrations
        cd ../frontend
        npm install
        npm run build
        sudo systemctl restart nginx
        EOF
             
